'
'
'
'	D:\Experiences_EPrime\MathFormula\Sub23\MathFormula_fMRI_LeftSame.ebs
'	Generated on: 3/22/2010	14:05:44
'
'
'	This file generated with E-Studio interface.
'	E-Prime Copyright © 2002 Psychology Software Tools.
'	ALL RIGHTS RESERVED
'
'	Legal use of this experiment script requires a full E-Prime or Runtime License.
'
'
'	Author:
'		  (INSERM U562)
'
'
'
'

Option CStrings On
Dim ebContext as Context


'--------------------------------------------------------------------------
' Class Declarations
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
'InitTextDisplayDefaults
'--------------------------------------------------------------------------
Sub InitTextDisplayDefaults(theTextDisplay As TextDisplay)

	If theTextDisplay Is Nothing Then Exit Sub

	theTextDisplay.X = "center"
	theTextDisplay.Y = "center"
	theTextDisplay.Width = "100%"
	theTextDisplay.Height = "100%"
	theTextDisplay.ForeColor = CColor("black")
	theTextDisplay.BackColor = CColor("white")
	theTextDisplay.BackStyle = "opaque"
	theTextDisplay.BorderColor = CColor("black")
	theTextDisplay.BorderWidth = CLng("0")
	theTextDisplay.XAlign = "center"
	theTextDisplay.YAlign = "center"
	theTextDisplay.AlignHorizontal = "center"
	theTextDisplay.AlignVertical = "center"
	theTextDisplay.WordWrap = True
	theTextDisplay.ClearAfter = CLogical("No")
	theTextDisplay.FontName = "Courier New"
	theTextDisplay.FontSize = "18"
	theTextDisplay.FontBold = CLogical("Yes")
	theTextDisplay.FontItalic = CLogical("No")
	theTextDisplay.FontUnderline = CLogical("No")
	theTextDisplay.FontStrikeout = CLogical("No")

End Sub







'--------------------------------------------------------------------------
'InitSlideStateDefaults
'--------------------------------------------------------------------------
Sub InitSlideStateDefaults(theSlideState As SlideState)

	If theSlideState Is Nothing Then Exit Sub

	theSlideState.X = "center"
	theSlideState.Y = "center"
	theSlideState.Width = "100%"
	theSlideState.Height = "100%"
	theSlideState.BackColor = CColor("white")
	theSlideState.BackStyle = "opaque"
	theSlideState.BorderColor = CColor("black")
	theSlideState.BorderWidth = CLng("0")
	theSlideState.XAlign = "center"
	theSlideState.YAlign = "center"
	theSlideState.ClearAfter = CLogical("No")
	theSlideState.Enabled = CLogical("Yes")

End Sub

'--------------------------------------------------------------------------
'InitSlideVisualStimDefaults
'--------------------------------------------------------------------------
Sub InitSlideVisualStimDefaults(theSlideVisualStim As SlideVisualStim)

	If theSlideVisualStim Is Nothing Then Exit Sub

	theSlideVisualStim.X = "center"
	theSlideVisualStim.Y = "center"
	theSlideVisualStim.Width = "25%"
	theSlideVisualStim.Height = "25%"
	theSlideVisualStim.ForeColor = CColor("black")
	theSlideVisualStim.BackColor = CColor("white")
	theSlideVisualStim.BackStyle = "opaque"
	theSlideVisualStim.BorderColor = CColor("black")
	theSlideVisualStim.BorderWidth = CLng("0")
	theSlideVisualStim.XAlign = "center"
	theSlideVisualStim.YAlign = "center"
	theSlideVisualStim.AlignHorizontal = "center"
	theSlideVisualStim.AlignVertical = "center"

End Sub

'--------------------------------------------------------------------------
'InitSlideTextDefaults
'--------------------------------------------------------------------------
Sub InitSlideTextDefaults(theSlideText As SlideText)

	If theSlideText Is Nothing Then Exit Sub

	InitSlideVisualStimDefaults theSlideText

	theSlideText.WordWrap = True
	theSlideText.FontName = "Courier New"
	theSlideText.FontSize = "18"
	theSlideText.FontBold = CLogical("Yes")
	theSlideText.FontItalic = CLogical("No")
	theSlideText.FontUnderline = CLogical("No")
	theSlideText.FontStrikeout = CLogical("No")

End Sub

'--------------------------------------------------------------------------
'InitSlideImageDefaults
'--------------------------------------------------------------------------
Sub InitSlideImageDefaults(theSlideImage As SlideImage)

	If theSlideImage Is Nothing Then Exit Sub

	InitSlideVisualStimDefaults theSlideImage

	theSlideImage.Stretch = CLogical("No")
	theSlideImage.MirrorLeftRight = CLogical("No")
	theSlideImage.MirrorUpDown = CLogical("No")
	theSlideImage.UseSourceColorKey = CLogical("No")
	theSlideImage.SourceColorKey = CColor("black")

End Sub

'--------------------------------------------------------------------------
'InitSlideSoundBufferDefaults
'--------------------------------------------------------------------------
Sub InitSlideSoundBufferDefaults(theSoundBuffer As SoundBuffer)

	If theSoundBuffer Is Nothing Then Exit Sub

	theSoundBuffer.Loop = CLogical("No")
	theSoundBuffer.StopAfter = CLogical("Yes")
	theSoundBuffer.StartOffset = "0"
	theSoundBuffer.StopOffset = "0"

End Sub











'--------------------------------------------------------------------------
' Instance Declarations
'--------------------------------------------------------------------------
Dim Display As DisplayDevice
Dim Sound As SoundDevice
Dim Keyboard As KeyboardDevice
Dim Mouse As MouseDevice
Dim Port As PortDevice
Dim Port2 As PortDevice
Dim SessionProc As Procedure

Dim List1 As List

Dim stimproc As Procedure

Dim Instructions As TextDisplay
Dim InstructionsEchoClients As EchoClientCollection

Dim FixationBefore As TextDisplay

Dim FixationBtwn As TextDisplay

Dim FeedbackTrial As FeedbackDisplay
Dim FeedbackTrial_State As SlideState
Dim FeedbackTrial_SlideText As SlideText
Dim FeedbackTrial_SlideSoundOut As SlideSoundOut
Dim FeedbackTrial_SoundBuffer As SoundBuffer
Dim FeedbackTrial_SoundBufferInfo As SoundBufferInfo

Dim FinishMessage As TextDisplay

Dim WaitTTL As TextDisplay
Dim WaitTTLEchoClients As EchoClientCollection

Dim FixationAfter As TextDisplay
Dim FixationAfterEchoClients As EchoClientCollection

Dim TaskExpression As Slide
Dim TaskExpression_State As SlideState
Dim TaskExpression_SlideText As SlideText

Dim MemoryExpression As Slide
Dim MemoryExpression_State As SlideState
Dim MemoryExpression_SlideText As SlideText

Dim FixationStart As TextDisplay

Dim FixationEnd As TextDisplay



'--------------------------------------------------------------------------
' Package Declare Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' User Script
'--------------------------------------------------------------------------
Dim ButtonAns, MouseAns, perf, TotalTrial as integer
Dim sessiondisp as string


'--------------------------------------------------------------------------
' Package Global Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Package Routines
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Implementation
'--------------------------------------------------------------------------
Sub SessionProc_Run(c as Context)
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - Initialization BEGIN
	'''''''''''''''''''''''''''''''''''''''''''''
	perf = 0

TotalTrial = 0

c.SetAttrib "sessiondisp", c.GetAttrib("Session")
List1.Filename = "MathFormula_fMRI_Run" + c.GetAttrib("sessiondisp") + ".txt"
List1.LoadMethod = ebLoadMethodFile
List1.Load
List1.Reset

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - Initialization END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	Instructions.InputMasks.Reset
	
	InstructionsEchoClients.RemoveAll
	Instructions.InputMasks.Add Keyboard.CreateInputMask("{ANY}", "", CLng(Instructions.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "ResponseMode:All ProcessBackspace:Yes")

	
	Instructions.Run
	c.SetAttrib "Instructions.Duration", Instructions.Duration
	c.SetAttrib "Instructions.FinishTime", Instructions.FinishTime
	
	
	
	WaitTTL.InputMasks.Reset
	
	WaitTTLEchoClients.RemoveAll
	WaitTTL.InputMasks.Add Keyboard.CreateInputMask("s", "", CLng(WaitTTL.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "ResponseMode:All ProcessBackspace:Yes")

	
	WaitTTLEchoClients.RemoveAll
	WaitTTL.InputMasks.Add Port.CreateInputMask("{ANY}", "6", CLng(WaitTTL.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "")

	
	WaitTTL.Run
	c.SetAttrib "WaitTTL.OnsetDelay", WaitTTL.OnsetDelay
	c.SetAttrib "WaitTTL.OnsetTime", WaitTTL.OnsetTime
	c.SetAttrib "WaitTTL.DurationError", WaitTTL.DurationError
	c.SetAttrib "WaitTTL.OffsetTime", WaitTTL.OffsetTime
	c.SetAttrib "WaitTTL.FinishTime", WaitTTL.FinishTime
	c.SetAttrib "WaitTTL.OffsetDelay", WaitTTL.OffsetDelay
	c.SetAttrib "WaitTTL.RTTime", WaitTTL.RTTime
	c.SetAttrib "WaitTTL.ACC", WaitTTL.ACC
	c.SetAttrib "WaitTTL.RT", WaitTTL.RT
	c.SetAttrib "WaitTTL.RESP", WaitTTL.RESP
	c.SetAttrib "WaitTTL.CRESP", WaitTTL.CRESP
	
	
	FixationStart.Run
	c.SetAttrib "FixationStart.OnsetDelay", FixationStart.OnsetDelay
	c.SetAttrib "FixationStart.OnsetTime", FixationStart.OnsetTime
	c.SetAttrib "FixationStart.Duration", FixationStart.Duration
	c.SetAttrib "FixationStart.OffsetTime", FixationStart.OffsetTime
	c.SetAttrib "FixationStart.OffsetDelay", FixationStart.OffsetDelay
	
	List1.Run c
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PeformSummary BEGIN
	'''''''''''''''''''''''''''''''''''''''''''''
	perf = perf*100/TotalTrial

c.SetAttrib "Perf" , perf

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PeformSummary END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	FixationEnd.Run
	c.SetAttrib "FixationEnd.OnsetDelay", FixationEnd.OnsetDelay
	c.SetAttrib "FixationEnd.OnsetTime", FixationEnd.OnsetTime
	c.SetAttrib "FixationEnd.Duration", FixationEnd.Duration
	c.SetAttrib "FixationEnd.OffsetTime", FixationEnd.OffsetTime
	c.SetAttrib "FixationEnd.OffsetDelay", FixationEnd.OffsetDelay
	
	
	FinishMessage.Text = "La session " &_ 
				c.GetAttrib("sessiondisp") &_ 
				"/7 est terminée.\n\nPourcentage de réponses correctes: " &_ 
				c.GetAttrib("Perf") &_ 
				"%\n\nRestez bien détendu et ne bougez pas la "
	FinishMessage.Run
	c.SetAttrib "Instructions.Duration", Instructions.Duration
	c.SetAttrib "Instructions.FinishTime", Instructions.FinishTime
	
	c.SetAttrib "WaitTTL.OnsetDelay", WaitTTL.OnsetDelay
	c.SetAttrib "WaitTTL.OnsetTime", WaitTTL.OnsetTime
	c.SetAttrib "WaitTTL.DurationError", WaitTTL.DurationError
	c.SetAttrib "WaitTTL.OffsetTime", WaitTTL.OffsetTime
	c.SetAttrib "WaitTTL.FinishTime", WaitTTL.FinishTime
	c.SetAttrib "WaitTTL.OffsetDelay", WaitTTL.OffsetDelay
	c.SetAttrib "WaitTTL.RTTime", WaitTTL.RTTime
	c.SetAttrib "WaitTTL.ACC", WaitTTL.ACC
	c.SetAttrib "WaitTTL.RT", WaitTTL.RT
	c.SetAttrib "WaitTTL.RESP", WaitTTL.RESP
	c.SetAttrib "WaitTTL.CRESP", WaitTTL.CRESP
	
	c.SetAttrib "FixationStart.OnsetDelay", FixationStart.OnsetDelay
	c.SetAttrib "FixationStart.OnsetTime", FixationStart.OnsetTime
	c.SetAttrib "FixationStart.Duration", FixationStart.Duration
	c.SetAttrib "FixationStart.OffsetTime", FixationStart.OffsetTime
	c.SetAttrib "FixationStart.OffsetDelay", FixationStart.OffsetDelay
	
	c.SetAttrib "FixationEnd.OnsetDelay", FixationEnd.OnsetDelay
	c.SetAttrib "FixationEnd.OnsetTime", FixationEnd.OnsetTime
	c.SetAttrib "FixationEnd.Duration", FixationEnd.Duration
	c.SetAttrib "FixationEnd.OffsetTime", FixationEnd.OffsetTime
	c.SetAttrib "FixationEnd.OffsetDelay", FixationEnd.OffsetDelay
	

	c.Log
End Sub

Sub stimproc_Run(c as Context)
	
	FixationBefore.Run
	c.SetAttrib "FixationBefore.OnsetDelay", FixationBefore.OnsetDelay
	c.SetAttrib "FixationBefore.OnsetTime", FixationBefore.OnsetTime
	c.SetAttrib "FixationBefore.Duration", FixationBefore.Duration
	c.SetAttrib "FixationBefore.OffsetTime", FixationBefore.OffsetTime
	c.SetAttrib "FixationBefore.OffsetDelay", FixationBefore.OffsetDelay
	
	
	
	Select Case MemoryExpression.ActiveState
		Case "Default"


			Set MemoryExpression_SlideText = CSlideText(MemoryExpression.States.Item("Default").Objects(1))
			Set MemoryExpression_SlideText = Nothing

			Set MemoryExpression_SlideText = CSlideText(MemoryExpression.States.Item("Default").Objects(2))
			MemoryExpression_SlideText.Text = c.GetAttrib("MemoryExpression")
			Set MemoryExpression_SlideText = Nothing
	End Select

	MemoryExpression.Run
	
	c.SetAttrib "MemoryExpression.OnsetDelay", MemoryExpression.OnsetDelay
	c.SetAttrib "MemoryExpression.OnsetTime", MemoryExpression.OnsetTime
	c.SetAttrib "MemoryExpression.Duration", MemoryExpression.Duration
	c.SetAttrib "MemoryExpression.CustomOnsetTime", MemoryExpression.CustomOnsetTime
	c.SetAttrib "MemoryExpression.CustomOffsetTime", MemoryExpression.CustomOffsetTime
	
	
	FixationBtwn.Run
	c.SetAttrib "FixationBtwn.OnsetDelay", FixationBtwn.OnsetDelay
	c.SetAttrib "FixationBtwn.OnsetTime", FixationBtwn.OnsetTime
	c.SetAttrib "FixationBtwn.Duration", FixationBtwn.Duration
	c.SetAttrib "FixationBtwn.OffsetTime", FixationBtwn.OffsetTime
	c.SetAttrib "FixationBtwn.OffsetDelay", FixationBtwn.OffsetDelay
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - CorrectButtonMEG BEGIN
	'''''''''''''''''''''''''''''''''''''''''''''
	if c.GetAttrib("TaskAns") = 1 then
	MouseAns = 2
	ButtonAns = 4
end if

if c.GetAttrib("TaskAns") = 2 then
	MouseAns = 1
	ButtonAns = 5
end if

c.SetAttrib "ButtonAns" , ButtonAns
c.SetAttrib "MouseAns" , MouseAns

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - CorrectButtonMEG END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	Select Case TaskExpression.ActiveState
		Case "Default"


			Set TaskExpression_SlideText = CSlideText(TaskExpression.States.Item("Default").Objects(1))
			TaskExpression_SlideText.Text = c.GetAttrib("TaskExpression")
			Set TaskExpression_SlideText = Nothing
	End Select

	TaskExpression.Run
	
	c.SetAttrib "TaskExpression.OnsetDelay", TaskExpression.OnsetDelay
	c.SetAttrib "TaskExpression.OnsetTime", TaskExpression.OnsetTime
	c.SetAttrib "TaskExpression.DurationError", TaskExpression.DurationError
	c.SetAttrib "TaskExpression.OffsetTime", TaskExpression.OffsetTime
	c.SetAttrib "TaskExpression.OffsetDelay", TaskExpression.OffsetDelay
	c.SetAttrib "TaskExpression.RTTime", TaskExpression.RTTime
	c.SetAttrib "TaskExpression.ACC", TaskExpression.ACC
	c.SetAttrib "TaskExpression.RT", TaskExpression.RT
	c.SetAttrib "TaskExpression.RESP", TaskExpression.RESP
	c.SetAttrib "TaskExpression.CRESP", TaskExpression.CRESP
	
	
	
	FixationAfter.InputMasks.Reset
	
	FixationAfterEchoClients.RemoveAll
	FixationAfter.InputMasks.Add Port.CreateInputMask("45", c.GetAttrib("ButtonAns"), CLng(FixationAfter.Duration), CLng("1"), ebEndResponseActionNone, CLogical("Yes"), "", "", "")

	
	FixationAfterEchoClients.RemoveAll
	FixationAfter.InputMasks.Add Mouse.CreateInputMask("12", c.GetAttrib("MouseAns"), CLng(FixationAfter.Duration), CLng("1"), ebEndResponseActionNone, CLogical("Yes"), "", "", "")

	
	FixationAfter.Run
	c.SetAttrib "FixationAfter.OnsetDelay", FixationAfter.OnsetDelay
	c.SetAttrib "FixationAfter.OnsetTime", FixationAfter.OnsetTime
	c.SetAttrib "FixationAfter.DurationError", FixationAfter.DurationError
	c.SetAttrib "FixationAfter.Duration", FixationAfter.Duration
	c.SetAttrib "FixationAfter.OffsetTime", FixationAfter.OffsetTime
	c.SetAttrib "FixationAfter.OffsetDelay", FixationAfter.OffsetDelay
	c.SetAttrib "FixationAfter.RTTime", FixationAfter.RTTime
	c.SetAttrib "FixationAfter.ACC", FixationAfter.ACC
	c.SetAttrib "FixationAfter.RT", FixationAfter.RT
	c.SetAttrib "FixationAfter.RESP", FixationAfter.RESP
	c.SetAttrib "FixationAfter.CRESP", FixationAfter.CRESP
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PerformInteg BEGIN
	'''''''''''''''''''''''''''''''''''''''''''''
	if FixationAfter.RESP = MouseAns then
c.SetAttrib "Objperformance", 1
elseif FixationAfter.RESP = ButtonAns then
c.SetAttrib "Objperformance", 1
else
c.SetAttrib "Objperformance", 0
End if

perf = perf + c.GetAttrib("Objperformance")
TotalTrial = TotalTrial + 1

c.SetAttrib "Perf" , perf
c.SetAttrib "TotalTrial" , TotalTrial

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PerformInteg END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	If FixationAfter.ACC = 1 Then
		'Set the ActiveState to Correct
		FeedbackTrial.ActiveState = "Correct"

		'Add an observation to the accuracy stats
		FeedbackTrial.AccStats.AddObservation FixationAfter.Acc

		'Add an observation to the response time stats
		' unless the user did not respond and the author
		' does not want us to add the no response RT
		If Len(FixationAfter.RESP) > 0 Then
			FeedbackTrial.RTStats.AddObservation FixationAfter.RT
			FeedbackTrial.CorrectRTStats.AddObservation FixationAfter.RT
		End If
	Else
		'Is it incorrect or no response?
		If Len(FixationAfter.RESP) > 0 Then
			'Set the ActiveState to Incorrect
			FeedbackTrial.ActiveState = "Incorrect"

			'Set the accuracy stats
			FeedbackTrial.AccStats.AddObservation FixationAfter.Acc

			'Set the RT stats
			FeedbackTrial.RTStats.AddObservation FixationAfter.RT
			FeedbackTrial.IncorrectRTStats.AddObservation FixationAfter.RT
		Else
			'Set the ActiveState to NoResponse
			FeedbackTrial.ActiveState = "NoResponse"

			'Does the author want to consider a NoResponse
			' to sum as an incorrect response in the ACC stats?
			If FeedbackTrial.CollectNoRespACCStats = True Then
				FeedbackTrial.AccStats.AddObservation FixationAfter.Acc
			End If
		End If
	End If

	Select Case FeedbackTrial.ActiveState
		Case "Correct"


			Set FeedbackTrial_SlideText = CSlideText(FeedbackTrial.States.Item("Correct").Objects(1))
			Set FeedbackTrial_SlideText = Nothing

			Set FeedbackTrial_SlideSoundOut = CSlideSoundOut(FeedbackTrial.States.Item("Correct").Objects(2))
			Set FeedbackTrial_SoundBuffer = FeedbackTrial_SlideSoundOut.Buffers(1)
			Set FeedbackTrial_SoundBuffer = Nothing
			Set FeedbackTrial_SlideSoundOut = Nothing
		Case "Incorrect"


			Set FeedbackTrial_SlideText = CSlideText(FeedbackTrial.States.Item("Incorrect").Objects(1))
			Set FeedbackTrial_SlideText = Nothing

			Set FeedbackTrial_SlideSoundOut = CSlideSoundOut(FeedbackTrial.States.Item("Incorrect").Objects(2))
			Set FeedbackTrial_SoundBuffer = FeedbackTrial_SlideSoundOut.Buffers(1)
			Set FeedbackTrial_SoundBuffer = Nothing
			Set FeedbackTrial_SlideSoundOut = Nothing
		Case "NoResponse"


			Set FeedbackTrial_SlideText = CSlideText(FeedbackTrial.States.Item("NoResponse").Objects(1))
			Set FeedbackTrial_SlideText = Nothing

			Set FeedbackTrial_SlideSoundOut = CSlideSoundOut(FeedbackTrial.States.Item("NoResponse").Objects(2))
			Set FeedbackTrial_SoundBuffer = FeedbackTrial_SlideSoundOut.Buffers(1)
			Set FeedbackTrial_SoundBuffer = Nothing
			Set FeedbackTrial_SlideSoundOut = Nothing
		Case "Pending"

	End Select

	FeedbackTrial.Duration = CLng(c.GetAttrib("RandPeriod"))
	

	FeedbackTrial.Run

	
	c.SetAttrib "FeedbackTrial.OnsetDelay", FeedbackTrial.OnsetDelay
	c.SetAttrib "FeedbackTrial.OnsetTime", FeedbackTrial.OnsetTime
	c.SetAttrib "FeedbackTrial.Duration", FeedbackTrial.Duration
	c.SetAttrib "FeedbackTrial.OffsetTime", FeedbackTrial.OffsetTime
	c.SetAttrib "FeedbackTrial.OffsetDelay", FeedbackTrial.OffsetDelay
	
	c.SetAttrib "FixationBefore.OnsetDelay", FixationBefore.OnsetDelay
	c.SetAttrib "FixationBefore.OnsetTime", FixationBefore.OnsetTime
	c.SetAttrib "FixationBefore.Duration", FixationBefore.Duration
	c.SetAttrib "FixationBefore.OffsetTime", FixationBefore.OffsetTime
	c.SetAttrib "FixationBefore.OffsetDelay", FixationBefore.OffsetDelay
	
	c.SetAttrib "MemoryExpression.OnsetDelay", MemoryExpression.OnsetDelay
	c.SetAttrib "MemoryExpression.OnsetTime", MemoryExpression.OnsetTime
	c.SetAttrib "MemoryExpression.Duration", MemoryExpression.Duration
	c.SetAttrib "MemoryExpression.CustomOnsetTime", MemoryExpression.CustomOnsetTime
	c.SetAttrib "MemoryExpression.CustomOffsetTime", MemoryExpression.CustomOffsetTime
	
	c.SetAttrib "FixationBtwn.OnsetDelay", FixationBtwn.OnsetDelay
	c.SetAttrib "FixationBtwn.OnsetTime", FixationBtwn.OnsetTime
	c.SetAttrib "FixationBtwn.Duration", FixationBtwn.Duration
	c.SetAttrib "FixationBtwn.OffsetTime", FixationBtwn.OffsetTime
	c.SetAttrib "FixationBtwn.OffsetDelay", FixationBtwn.OffsetDelay
	
	c.SetAttrib "TaskExpression.OnsetDelay", TaskExpression.OnsetDelay
	c.SetAttrib "TaskExpression.OnsetTime", TaskExpression.OnsetTime
	c.SetAttrib "TaskExpression.DurationError", TaskExpression.DurationError
	c.SetAttrib "TaskExpression.OffsetTime", TaskExpression.OffsetTime
	c.SetAttrib "TaskExpression.OffsetDelay", TaskExpression.OffsetDelay
	c.SetAttrib "TaskExpression.RTTime", TaskExpression.RTTime
	c.SetAttrib "TaskExpression.ACC", TaskExpression.ACC
	c.SetAttrib "TaskExpression.RT", TaskExpression.RT
	c.SetAttrib "TaskExpression.RESP", TaskExpression.RESP
	c.SetAttrib "TaskExpression.CRESP", TaskExpression.CRESP
	
	c.SetAttrib "FixationAfter.OnsetDelay", FixationAfter.OnsetDelay
	c.SetAttrib "FixationAfter.OnsetTime", FixationAfter.OnsetTime
	c.SetAttrib "FixationAfter.DurationError", FixationAfter.DurationError
	c.SetAttrib "FixationAfter.Duration", FixationAfter.Duration
	c.SetAttrib "FixationAfter.OffsetTime", FixationAfter.OffsetTime
	c.SetAttrib "FixationAfter.OffsetDelay", FixationAfter.OffsetDelay
	c.SetAttrib "FixationAfter.RTTime", FixationAfter.RTTime
	c.SetAttrib "FixationAfter.ACC", FixationAfter.ACC
	c.SetAttrib "FixationAfter.RT", FixationAfter.RT
	c.SetAttrib "FixationAfter.RESP", FixationAfter.RESP
	c.SetAttrib "FixationAfter.CRESP", FixationAfter.CRESP
	
	c.SetAttrib "FeedbackTrial.OnsetDelay", FeedbackTrial.OnsetDelay
	c.SetAttrib "FeedbackTrial.OnsetTime", FeedbackTrial.OnsetTime
	c.SetAttrib "FeedbackTrial.Duration", FeedbackTrial.Duration
	c.SetAttrib "FeedbackTrial.OffsetTime", FeedbackTrial.OffsetTime
	c.SetAttrib "FeedbackTrial.OffsetDelay", FeedbackTrial.OffsetDelay
	

	c.Log
End Sub









'--------------------------------------------------------------------------
' InitDevices
'
'--------------------------------------------------------------------------
Sub InitDevices(c As Context)



	SetOSThreadPriority 3


	Set Display = New DisplayDevice
	Display.Name = "Display"

	Dim DisplayDisplayDeviceInfo As DisplayDeviceInfo
	DisplayDisplayDeviceInfo.XRes = 1024
	DisplayDisplayDeviceInfo.YRes = 768
	DisplayDisplayDeviceInfo.ColorDepth = 16
	DisplayDisplayDeviceInfo.RefreshRate = 0
	DisplayDisplayDeviceInfo.NumPages = 0

	Display.Open DisplayDisplayDeviceInfo
	c.SetAttrib "Display.RefreshRate", Format$(Display.CalculatedRefreshRate, "0.000")

	Set Sound = New SoundDevice
	Sound.Name = "Sound"

	Dim SoundSoundOutDeviceInfo As SoundDeviceInfo
	SoundSoundOutDeviceInfo.Channels = 2
	SoundSoundOutDeviceInfo.SamplesPerSecond = 44100
	SoundSoundOutDeviceInfo.BitsPerSample = 16
	Sound.Open SoundSoundOutDeviceInfo

	Set Keyboard = New KeyboardDevice
	Keyboard.Name = "Keyboard"

	Dim KeyboardKeyboardDeviceInfo as KeyboardDeviceInfo
	KeyboardKeyboardDeviceInfo.CollectionMode = ebPressesOnly
	KeyboardKeyboardDeviceInfo.CapsLock = ebCapsLockOff
	KeyboardKeyboardDeviceInfo.NumLock = ebNumLockOn
	Keyboard.Open KeyboardKeyboardDeviceInfo
	
	Set Mouse = New MouseDevice
	Mouse.Name = "Mouse"

	Dim MouseMouseDeviceInfo as MouseDeviceInfo
	MouseMouseDeviceInfo.OpenMode = ebMouseOpenModeDirect
	MouseMouseDeviceInfo.CollectionMode = ebPressesOnly
	MouseMouseDeviceInfo.ShowCursor = False
	Mouse.Open MouseMouseDeviceInfo

	Set Port = New PortDevice
	Port.Name = "Port"
	Dim PortPortDeviceInfo As PortDeviceInfo
	PortPortDeviceInfo.CollectionMode = ebPressesOnly
	PortPortDeviceInfo.Address = &HE801
	PortPortDeviceInfo.Size = 8
	PortPortDeviceInfo.Invert = CLogical("No")
	PortPortDeviceInfo.Mask = -1
	Port.Open PortPortDeviceInfo

	Set Port2 = New PortDevice
	Port2.Name = "Port2"


	SetOSThreadPriority 0

End Sub



'--------------------------------------------------------------------------
' InitObjects
'
'--------------------------------------------------------------------------
Sub InitObjects(c As Context)

	Set SessionProc = New Procedure
	SessionProc.Name = "SessionProc"
	SessionProc.Tag = ""
	SessionProc.Subroutine = "SessionProc_Run"

	Set List1 = New List
	List1.Name = "List1"
	List1.Tag = ""

	'Initialization for List1
	
	Set List1.Order = New RandomOrder
	Set List1.Deletion = NoDeletion
	List1.ResetEveryRun = False

	' Create the column headings
	List1.AddAttrib "Level"
	List1.AddAttrib "BranchSide"
	List1.AddAttrib "MemoryExpression"
	List1.AddAttrib "TaskExpression"
	List1.AddAttrib "TaskAns"
	List1.AddAttrib "DiffPosi1"
	List1.AddAttrib "WithinCorrect1"
	List1.AddAttrib "DiffPosi2"
	List1.AddAttrib "WithinCorrect2"
	List1.AddAttrib "ExchSymb"
	List1.AddAttrib "Trigger"
	List1.AddAttrib "RandPeriod"
	List1.Filename = "MathFormula_fMRI_Run1.txt"
	List1.LoadMethod = ebLoadMethodFile

	List1.Load
	List1.Reset
	
	Set List1.TerminateCondition = Cycles(1)
	Set List1.ResetCondition = Samples(List1.Deletion.Count)
	
	Set stimproc = New Procedure
	stimproc.Name = "stimproc"
	stimproc.Tag = ""
	stimproc.Subroutine = "stimproc_Run"

	Set Instructions = New TextDisplay
	Instructions.Name = "Instructions"
	Instructions.Tag = ""

	Set InstructionsEchoClients = New EchoClientCollection

	InitTextDisplayDefaults Instructions

	Instructions.Text = "\nFixez le point au centre de l'écran\n\nAppuyez le plus rapidement possible sur le  bouton gauche si les 2 chaines de caractère sont identiques appuy" &_ 
				"ez sur le bouton droit si elles sont différentes\n\nMerci de ne pas bouger la tête\n"
	Instructions.BackColor = CColor("black")
	Instructions.ForeColor = CColor("white")
	Instructions.FontName = "Verdana"
	Instructions.FontBold = CLogical("No")
	Instructions.ClearAfter = CLogical("Yes")
	Instructions.Duration = CLng("-1")
	Instructions.TimingMode = ebTimingModeEvent
	Instructions.PreRelease = Val("60")

	Instructions.OnsetSync = 1
	Instructions.OffsetSync = 0

	Set FixationBefore = New TextDisplay
	FixationBefore.Name = "FixationBefore"
	FixationBefore.Tag = ""

	InitTextDisplayDefaults FixationBefore

	FixationBefore.Text = "·"
	FixationBefore.BackColor = CColor("black")
	FixationBefore.ForeColor = CColor("yellow")
	FixationBefore.FontName = "Century"
	FixationBefore.FontSize = "22"
	FixationBefore.Duration = CLng("800")
	FixationBefore.TimingMode = ebTimingModeCumulative
	FixationBefore.PreRelease = Val("60")

	FixationBefore.OnsetSync = 1
	FixationBefore.OffsetSync = 0

	Set FixationBtwn = New TextDisplay
	FixationBtwn.Name = "FixationBtwn"
	FixationBtwn.Tag = ""

	InitTextDisplayDefaults FixationBtwn

	FixationBtwn.Text = "·"
	FixationBtwn.BackColor = CColor("black")
	FixationBtwn.ForeColor = CColor("yellow")
	FixationBtwn.FontName = "Century"
	FixationBtwn.FontSize = "22"
	FixationBtwn.Duration = CLng("1500")
	FixationBtwn.TimingMode = ebTimingModeCumulative
	FixationBtwn.PreRelease = Val("60")

	FixationBtwn.OnsetSync = 1
	FixationBtwn.OffsetSync = 0

	Set FeedbackTrial = New FeedbackDisplay
	FeedbackTrial.Name = "FeedbackTrial"
	FeedbackTrial.Tag = ""

	FeedbackTrial.ACCDivisor = "1.0"
	FeedbackTrial.ACCFormat = "Percent"
	FeedbackTrial.RTDivisor = "1000.0"
	FeedbackTrial.RTFormat = "###0.000"
	FeedbackTrial.CorrectRTDivisor = "1000.0"
	FeedbackTrial.CorrectRTFormat = "###0.000"
	FeedbackTrial.IncorrectRTDivisor = "1000.0"
	FeedbackTrial.IncorrectRTFormat = "###0.000"
	FeedbackTrial.CollectNoRespACCStats = True
	FeedbackTrial.TimingMode = ebTimingModeCumulative
	FeedbackTrial.PreRelease = Val("60")

	FeedbackTrial.OnsetSync = 1
	FeedbackTrial.OffsetSync = 0

	Set FeedbackTrial_State = New SlideState
	FeedbackTrial_State.Name = "Correct"

	InitSlideStateDefaults FeedbackTrial_State

	FeedbackTrial_State.BackColor = CColor("black")

	FeedbackTrial.States.Add FeedbackTrial_State, "Correct"


	Set FeedbackTrial_SlideText = New SlideText
	FeedbackTrial_SlideText.Name = "Text1"

	InitSlideTextDefaults FeedbackTrial_SlideText

	FeedbackTrial_SlideText.Text = "·"
	FeedbackTrial_SlideText.ForeColor = CColor("green")
	FeedbackTrial_SlideText.BackColor = CColor("black")
	FeedbackTrial_SlideText.FontName = "Century"
	FeedbackTrial_SlideText.FontSize = "22"
	FeedbackTrial.States.Item("Correct").Objects.Add FeedbackTrial_SlideText, "Text1"

	Set FeedbackTrial_SlideSoundOut = New SlideSoundOut
	FeedbackTrial_SlideSoundOut.Name = "SoundOut1"
	FeedbackTrial_SoundBufferInfo.MaxLength = 5000
	FeedbackTrial_SoundBufferInfo.VolumeControl = CLogical("no")
	FeedbackTrial_SoundBufferInfo.PanControl = CLogical("no")
	Set FeedbackTrial_SoundBuffer = Sound.CreateBuffer(FeedbackTrial_SoundBufferInfo)
	FeedbackTrial_SlideSoundOut.Buffers.Add FeedbackTrial_SoundBuffer
	FeedbackTrial.States.Item("Correct").Objects.Add FeedbackTrial_SlideSoundOut, "SoundOut1"

	FeedbackTrial_SoundBuffer.Filename = "Sound\\Reward2_Amplify.wav"
	FeedbackTrial_SoundBuffer.Load

	InitSlideSoundBufferDefaults FeedbackTrial_SoundBuffer

	FeedbackTrial_SoundBuffer.EndSoundAction = 0
	Set FeedbackTrial_SoundBuffer = Nothing

	Set FeedbackTrial_State = New SlideState
	FeedbackTrial_State.Name = "Incorrect"

	InitSlideStateDefaults FeedbackTrial_State

	FeedbackTrial_State.BackColor = CColor("black")

	FeedbackTrial.States.Add FeedbackTrial_State, "Incorrect"


	Set FeedbackTrial_SlideText = New SlideText
	FeedbackTrial_SlideText.Name = "Text1"

	InitSlideTextDefaults FeedbackTrial_SlideText

	FeedbackTrial_SlideText.Text = "·"
	FeedbackTrial_SlideText.ForeColor = CColor("red")
	FeedbackTrial_SlideText.BackColor = CColor("black")
	FeedbackTrial_SlideText.FontName = "Century"
	FeedbackTrial_SlideText.FontSize = "22"
	FeedbackTrial.States.Item("Incorrect").Objects.Add FeedbackTrial_SlideText, "Text1"

	Set FeedbackTrial_SlideSoundOut = New SlideSoundOut
	FeedbackTrial_SlideSoundOut.Name = "SoundOut2"
	FeedbackTrial_SoundBufferInfo.MaxLength = 5000
	FeedbackTrial_SoundBufferInfo.VolumeControl = CLogical("no")
	FeedbackTrial_SoundBufferInfo.PanControl = CLogical("no")
	Set FeedbackTrial_SoundBuffer = Sound.CreateBuffer(FeedbackTrial_SoundBufferInfo)
	FeedbackTrial_SlideSoundOut.Buffers.Add FeedbackTrial_SoundBuffer
	FeedbackTrial.States.Item("Incorrect").Objects.Add FeedbackTrial_SlideSoundOut, "SoundOut2"

	FeedbackTrial_SoundBuffer.Filename = "Sound\\Beep2_Amplify.wav"
	FeedbackTrial_SoundBuffer.Load

	InitSlideSoundBufferDefaults FeedbackTrial_SoundBuffer

	FeedbackTrial_SoundBuffer.EndSoundAction = 0
	Set FeedbackTrial_SoundBuffer = Nothing

	Set FeedbackTrial_State = New SlideState
	FeedbackTrial_State.Name = "NoResponse"

	InitSlideStateDefaults FeedbackTrial_State

	FeedbackTrial_State.BackColor = CColor("black")

	FeedbackTrial.States.Add FeedbackTrial_State, "NoResponse"


	Set FeedbackTrial_SlideText = New SlideText
	FeedbackTrial_SlideText.Name = "Text1"

	InitSlideTextDefaults FeedbackTrial_SlideText

	FeedbackTrial_SlideText.Text = "·"
	FeedbackTrial_SlideText.ForeColor = CColor("blue")
	FeedbackTrial_SlideText.BackColor = CColor("black")
	FeedbackTrial_SlideText.FontName = "Century"
	FeedbackTrial_SlideText.FontSize = "22"
	FeedbackTrial.States.Item("NoResponse").Objects.Add FeedbackTrial_SlideText, "Text1"

	Set FeedbackTrial_SlideSoundOut = New SlideSoundOut
	FeedbackTrial_SlideSoundOut.Name = "SoundOut1"
	FeedbackTrial_SoundBufferInfo.MaxLength = 5000
	FeedbackTrial_SoundBufferInfo.VolumeControl = CLogical("no")
	FeedbackTrial_SoundBufferInfo.PanControl = CLogical("no")
	Set FeedbackTrial_SoundBuffer = Sound.CreateBuffer(FeedbackTrial_SoundBufferInfo)
	FeedbackTrial_SlideSoundOut.Buffers.Add FeedbackTrial_SoundBuffer
	FeedbackTrial.States.Item("NoResponse").Objects.Add FeedbackTrial_SlideSoundOut, "SoundOut1"

	FeedbackTrial_SoundBuffer.Filename = "Sound\\Beep1_Amplify.wav"
	FeedbackTrial_SoundBuffer.Load

	InitSlideSoundBufferDefaults FeedbackTrial_SoundBuffer

	FeedbackTrial_SoundBuffer.EndSoundAction = 0
	Set FeedbackTrial_SoundBuffer = Nothing

	Set FeedbackTrial_State = New SlideState
	FeedbackTrial_State.Name = "Pending"

	InitSlideStateDefaults FeedbackTrial_State


	FeedbackTrial.States.Add FeedbackTrial_State, "Pending"


	Set FinishMessage = New TextDisplay
	FinishMessage.Name = "FinishMessage"
	FinishMessage.Tag = ""

	InitTextDisplayDefaults FinishMessage

	FinishMessage.BackColor = CColor("black")
	FinishMessage.ForeColor = CColor("white")
	FinishMessage.FontName = "Verdana"
	FinishMessage.FontBold = CLogical("No")
	FinishMessage.Duration = CLng("5000")
	FinishMessage.TimingMode = ebTimingModeEvent
	FinishMessage.PreRelease = Val("60")

	FinishMessage.OnsetSync = 1
	FinishMessage.OffsetSync = 0

	Set WaitTTL = New TextDisplay
	WaitTTL.Name = "WaitTTL"
	WaitTTL.Tag = ""

	Set WaitTTLEchoClients = New EchoClientCollection

	InitTextDisplayDefaults WaitTTL

	WaitTTL.Text = "Waiting for fMRI trigger... (or press 's' to start)"
	WaitTTL.BackColor = CColor("black")
	WaitTTL.ForeColor = CColor("white")
	WaitTTL.ClearAfter = CLogical("Yes")
	WaitTTL.Duration = CLng("-1")
	WaitTTL.TimingMode = ebTimingModeEvent
	WaitTTL.PreRelease = Val("60")

	WaitTTL.OnsetSync = 1
	WaitTTL.OffsetSync = 0

	Set FixationAfter = New TextDisplay
	FixationAfter.Name = "FixationAfter"
	FixationAfter.Tag = ""

	Set FixationAfterEchoClients = New EchoClientCollection

	InitTextDisplayDefaults FixationAfter

	FixationAfter.Text = "·"
	FixationAfter.BackColor = CColor("black")
	FixationAfter.ForeColor = CColor("yellow")
	FixationAfter.FontName = "Century"
	FixationAfter.FontSize = "22"
	FixationAfter.Duration = CLng("1500")
	FixationAfter.TimingMode = ebTimingModeCumulative
	FixationAfter.PreRelease = Val("60")

	FixationAfter.OnsetSync = 1
	FixationAfter.OffsetSync = 0

	Set TaskExpression = New Slide
	TaskExpression.Name = "TaskExpression"
	TaskExpression.Tag = ""
	TaskExpression.Duration = CLng("200")
	TaskExpression.TimingMode = ebTimingModeCumulative
	TaskExpression.PreRelease = Val("60")

	TaskExpression.OnsetSync = 1
	TaskExpression.OffsetSync = 0

	Set TaskExpression_State = New SlideState
	TaskExpression_State.Name = "Default"

	InitSlideStateDefaults TaskExpression_State

	TaskExpression_State.BackColor = CColor("black")

	TaskExpression.States.Add TaskExpression_State, "Default"


	Set TaskExpression_SlideText = New SlideText
	TaskExpression_SlideText.Name = "Text1"

	InitSlideTextDefaults TaskExpression_SlideText

	TaskExpression_SlideText.ForeColor = CColor("white")
	TaskExpression_SlideText.BackColor = CColor("black")
	TaskExpression_SlideText.FontName = "Lucida Console"
	TaskExpression_SlideText.FontSize = "22"
	TaskExpression_SlideText.FontBold = CLogical("No")
	TaskExpression.States.Item("Default").Objects.Add TaskExpression_SlideText, "Text1"
	TaskExpression.ActiveState = "Default"

	Set MemoryExpression = New Slide
	MemoryExpression.Name = "MemoryExpression"
	MemoryExpression.Tag = ""
	MemoryExpression.Duration = CLng("200")
	MemoryExpression.TimingMode = ebTimingModeCumulative
	MemoryExpression.PreRelease = Val("60")

	MemoryExpression.OnsetSync = 1
	MemoryExpression.OffsetSync = 0

	Set MemoryExpression_State = New SlideState
	MemoryExpression_State.Name = "Default"

	InitSlideStateDefaults MemoryExpression_State

	MemoryExpression_State.BackColor = CColor("black")

	MemoryExpression.States.Add MemoryExpression_State, "Default"


	Set MemoryExpression_SlideText = New SlideText
	MemoryExpression_SlideText.Name = "Text2"

	InitSlideTextDefaults MemoryExpression_SlideText

	MemoryExpression_SlideText.Text = ""
	MemoryExpression_SlideText.ForeColor = CColor("white")
	MemoryExpression_SlideText.BackColor = CColor("black")
	MemoryExpression_SlideText.BackStyle = "transparent"
	MemoryExpression_SlideText.FontName = "Century"
	MemoryExpression_SlideText.FontSize = "22"
	MemoryExpression.States.Item("Default").Objects.Add MemoryExpression_SlideText, "Text2"

	Set MemoryExpression_SlideText = New SlideText
	MemoryExpression_SlideText.Name = "Text1"

	InitSlideTextDefaults MemoryExpression_SlideText

	MemoryExpression_SlideText.ForeColor = CColor("white")
	MemoryExpression_SlideText.BackColor = CColor("black")
	MemoryExpression_SlideText.FontName = "Lucida Console"
	MemoryExpression_SlideText.FontSize = "22"
	MemoryExpression_SlideText.FontBold = CLogical("No")
	MemoryExpression.States.Item("Default").Objects.Add MemoryExpression_SlideText, "Text1"
	MemoryExpression.ActiveState = "Default"

	Set FixationStart = New TextDisplay
	FixationStart.Name = "FixationStart"
	FixationStart.Tag = ""

	InitTextDisplayDefaults FixationStart

	FixationStart.Text = "·"
	FixationStart.BackColor = CColor("black")
	FixationStart.ForeColor = CColor("gray")
	FixationStart.FontName = "Century"
	FixationStart.FontSize = "22"
	FixationStart.Duration = CLng("5000")
	FixationStart.TimingMode = ebTimingModeCumulative
	FixationStart.PreRelease = Val("60")

	FixationStart.OnsetSync = 1
	FixationStart.OffsetSync = 0

	Set FixationEnd = New TextDisplay
	FixationEnd.Name = "FixationEnd"
	FixationEnd.Tag = ""

	InitTextDisplayDefaults FixationEnd

	FixationEnd.Text = "·"
	FixationEnd.BackColor = CColor("black")
	FixationEnd.ForeColor = CColor("gray")
	FixationEnd.FontName = "Century"
	FixationEnd.FontSize = "22"
	FixationEnd.Duration = CLng("5000")
	FixationEnd.TimingMode = ebTimingModeCumulative
	FixationEnd.PreRelease = Val("60")

	FixationEnd.OnsetSync = 1
	FixationEnd.OffsetSync = 0


End Sub


'--------------------------------------------------------------------------
' InitPackages
'
'--------------------------------------------------------------------------
Sub InitPackages(c As Context)

End Sub



'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitDevices
'--------------------------------------------------------------------------
Sub UnInitDevices()
	Display.Close
	Set Display = Nothing
	Sound.Close

	Keyboard.Close
	Set Keyboard = Nothing

	Mouse.Close
	Set Mouse = Nothing


	Port.Close
	End Sub


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitPackages
'--------------------------------------------------------------------------
Sub UnInitPackages()
End Sub


'--------------------------------------------------------------------------
' UnInitObjects
'
'--------------------------------------------------------------------------
Sub UnInitObjects()

	Set SessionProc = Nothing

	Set List1 = Nothing

	Set stimproc = Nothing

	Set Instructions = Nothing

	Set InstructionsEchoClients = Nothing

	Set FixationBefore = Nothing

	Set FixationBtwn = Nothing

	Set FeedbackTrial = Nothing

	Set FinishMessage = Nothing

	Set WaitTTL = Nothing

	Set WaitTTLEchoClients = Nothing

	Set FixationAfter = Nothing

	Set FixationAfterEchoClients = Nothing

	Set TaskExpression = Nothing

	Set MemoryExpression = Nothing

	Set FixationStart = Nothing

	Set FixationEnd = Nothing


End Sub


'--------------------------------------------------------------------------
' Main
'
'--------------------------------------------------------------------------
Sub Main()

	CreateDefaultPort

	' Create and initialize the default context, data file,
	' and provide global access to the context.
	Dim c As Context
	Set c = New Context
	Set c.DataFile = New DataFile
	c.PushNewFrame
	Set ebContext = c

	' Set the log level names
	c.SetLogLevelName 1, "Session"
	c.SetLogLevelName 2, "Block"
	c.SetLogLevelName 3, "Trial"
	c.SetLogLevelName 4, "SubTrial"
	c.SetLogLevelName 5, "LogLevel5"
	c.SetLogLevelName 6, "LogLevel6"
	c.SetLogLevelName 7, "LogLevel7"
	c.SetLogLevelName 8, "LogLevel8"
	c.SetLogLevelName 9, "LogLevel9"
	c.SetLogLevelName 10, "LogLevel10"

	' Set standard logging items
	ebContext.SetAttrib "Experiment", "MathFormula_fMRI_LeftSame"
	ebContext.SetAttrib "SessionDate", Date$
	ebContext.SetAttrib "SessionTime", Time$
	ebContext.SetAttrib "RandomSeed", PRNG.GetSeed()

	If Basic.OS = ebWin32 Then
		WinActivate "E-Run Experiment Window"
	End If

	' Get the StartupInfo
	' Set default for GroupNumber
	c.SetAttrib "Group", "1"


	' Set the defaults for all of the StartupInfo
	c.SetAttrib "Subject", "1"
	c.SetAttrib "Session", "1"

	Dim vAnswer As Variant
StartupInfo_Begin:

StartupInfoPrompt_Subject:
	vAnswer = AskBox("Please enter the Subject Number (1-32767, 0=No Data Logging):", c.GetAttrib("Subject"))
	If Not IsEmpty(vAnswer) then
		If Not IsNumeric(vAnswer) then
			MsgBox "Please enter an integer value"
			GoTo StartupInfoPrompt_Subject
		ElseIf CLng(vAnswer) < 0 Then
			MsgBox "The value for Subject must not be less than 0"
			GoTo StartupInfoPrompt_Subject
		ElseIf CLng(vAnswer) > 32767 Then
			MsgBox "The value for Subject must be not be greater than 32767"
			GoTo StartupInfoPrompt_Subject
		End If
	Else
		GoTo ExperimentAbort
	End if

	c.SetAttrib "Subject", CStr(vAnswer)

StartupInfoPrompt_Session:
	vAnswer = AskBox("Please enter the Session Number (1-32767):", c.GetAttrib("Session"))
	If Not IsEmpty(vAnswer) then
		If Not IsNumeric(vAnswer) then
			MsgBox "Please enter an integer value"
			GoTo StartupInfoPrompt_Session
		ElseIf CLng(vAnswer) < 1 Then
			MsgBox "The value for Session must not be less than 1"
			GoTo StartupInfoPrompt_Session
		ElseIf CLng(vAnswer) > 32767 Then
			MsgBox "The value for Session must be not be greater than 32767"
			GoTo StartupInfoPrompt_Session
		End If
	Else
		GoTo ExperimentAbort
	End if

	c.SetAttrib "Session", CStr(vAnswer)

	' Display the summary
	Dim strSummary As String
	strSummary = "Subject:    " & c.GetAttrib("Subject") & "\n"
	strSummary = strSummary & "Session:    " & c.GetAttrib("Session") & "\n"
	strSummary = strSummary & "\nContinue with the above startup info?"

	Dim nSummaryAnswer As Integer
	nSummaryAnswer = MsgBox(strSummary, ebYesNoCancel + ebQuestion, "Summary of Startup Info")
	If nSummaryAnswer = ebNo Then
		GoTo StartupInfo_Begin
	ElseIf nSummaryAnswer = ebCancel Then
		GoTo ExperimentAbort
	End If


	' Set the default Data Filename
	c.DataFile.Filename = CStr(c.GetAttrib("Experiment")) & "-" & CStr(c.GetAttrib("Subject")) & "-" & CStr(c.GetAttrib("Session")) & ".txt"

	' If we are logging data, then prompt to overwrite the data file if it exists
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		If FileExists(c.DataFile.Filename) Then
			If ebYes <> MsgBox("WARNING: The data file and/or recovery file already exists:\nFILE: " & c.DataFile.Filename & "\n\nDo you want to overwrite?", ebYesNo + ebQuestion) Then
				GoTo ExperimentAbort
			End If
		End If
	End If

	' Initialize all system devices, packages, and objects
	InitDevices c
	InitPackages c
	InitObjects c

	' If we are logging data, then open the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		c.DataFile.Open
		c.LogHeader
	End If

	' Start the running of the Experiment
	SessionProc.Run c

	' Clean up the context and close the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		c.DataFile.Close
		' Attempt to convert the recovery file into a data file
		Dim nConvert As Long
		nConvert = c.DataFile.Convert(ebProgressSimple)
		If nConvert = 0 Then
			' Settings in E-Studio are set to not remove E-Recovery file
		Else
			' The datafile failed to convert!
			MsgBox "ERROR: The datafile did not convert!\nFILE: " & c.DataFile.Filename & "\n\nIt is recommended that you recover your data with the E-Recovery utility"
			MsgBox c.DataFile.GetLastErrorMessage()
		End If
	End If
ExperimentFinish:

	UnInitObjects

	UnInitPackages
	UnInitDevices

ExperimentAbort:

	' Clean up the context
	c.PopFrame
	Set c = Nothing
	Set ebContext = Nothing

	DestroyDefaultPort

End Sub
